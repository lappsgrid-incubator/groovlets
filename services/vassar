@GrabConfig(systemClassLoader=true)
@Grab("net.servicegrid:jp.go.nict.langrid.client:1.0.5")
import jp.go.nict.langrid.client.RequestAttributes
@Grab("net.servicegrid:jp.go.nict.langrid.client.soap:1.0.5")
import jp.go.nict.langrid.client.soap.SoapClientFactory
@Grab('org.langrid:jp.go.nict.langrid.service.management_1_2:1.0.10')
import jp.go.nict.langrid.service_1_2.foundation.MatchingCondition
import jp.go.nict.langrid.service_1_2.foundation.Order
import jp.go.nict.langrid.service_1_2.foundation.servicemanagement.ServiceEntrySearchResult
import jp.go.nict.langrid.service_1_2.foundation.servicemanagement.ServiceManagementService

import javax.servlet.http.HttpServletResponse

String method = request.method
String url = 'http://vassar.lappsgrid.org'

String username = System.getenv('SERVICE_MANAGER_USERNAME')
String password = System.getenv('SERVICE_MANAGER_PASSWORD')

if (!username || !password) {
    response.status = HttpServletResponse.SC_INTERNAL_SERVER_ERROR
    out.println "This service has not been properly configured."
    return
}

if (method != 'GET') {
    response.status = HttpServletResponse.SC_METHOD_NOT_ALLOWED
    response.addHeader('Allow', 'GET')
    return
}

def conditions = new MatchingCondition[params.size()]
int i = 0
params.each { name,value ->
    conditions[i] = new MatchingCondition(name, value, "PARTIAL")
    ++i
}
//def conditions = [] as MatchingCondition[]
def order = [] as Order[]
SoapClientFactory f = new SoapClientFactory();
ServiceManagementService s = f.create(
        ServiceManagementService.class,
        new URL("$url/services/ServiceManagement")
);
RequestAttributes attr = (RequestAttributes)s;
attr.setUserId(username);
attr.setPassword(password);

Map result = [:]
result.url = url
result.totalCount = 0
result.elements = []

// The ServiceManager only allows us to fetch metadata for 100 services at a
// time. So we have to be prepared to page through the entire list if more than
// 100.
int PAGE_SIZE = 100
int count = 0
ServiceEntrySearchResult more = s.searchServices(count, PAGE_SIZE, conditions, order, "ALL");
while (more.elements.length > 0) {
    result.elements.addAll more.elements
    count += more.elements.length
    more = s.searchServices(count, PAGE_SIZE, conditions, order, "ALL")
}
result.totalCount = count
response.status = 200
response.contentType = 'application/json'
out.println new groovy.json.JsonBuilder(result).toPrettyString()

