@GrabConfig(systemClassLoader=true)
@Grab("net.servicegrid:jp.go.nict.langrid.client:1.0.5")
import jp.go.nict.langrid.client.RequestAttributes
@Grab("net.servicegrid:jp.go.nict.langrid.client.soap:1.0.5")
import jp.go.nict.langrid.client.soap.SoapClientFactory
@Grab('org.langrid:jp.go.nict.langrid.service.management_1_2:1.0.10')
import jp.go.nict.langrid.service_1_2.foundation.MatchingCondition
import jp.go.nict.langrid.service_1_2.foundation.Order
import jp.go.nict.langrid.service_1_2.foundation.servicemanagement.ServiceEntrySearchResult
import jp.go.nict.langrid.service_1_2.foundation.servicemanagement.ServiceManagementService

import javax.servlet.http.HttpServletResponse

String method = request.method
String url = 'http://eldrad.cs-i.brandeis.edu:8080/service_manager'

String username = System.getenv('BRANDEIS_USERNAME')
String password = System.getenv('BRANDEIS_PASSWORD')
//String username = 'tester'
//String password = 'tester'

if (!username || !password) {
    response.status = HttpServletResponse.SC_INTERNAL_SERVER_ERROR
    out.println "This service has not been properly configured."
    return
}

if (method != 'GET') {
    response.status = HttpServletResponse.SC_METHOD_NOT_ALLOWED
    response.addHeader('Allow', 'GET')
    return
}

//def conditions = [] as MatchingCondition[]
def conditions = new MatchingCondition[params.size()]
int i = 0
params.each { name,value ->
    conditions[i] = new MatchingCondition(name, value, "PARTIAL")
    ++i
}

def order = [] as Order[]
SoapClientFactory f = new SoapClientFactory();
ServiceManagementService s = f.create(
        ServiceManagementService.class,
        new URL("$url/services/ServiceManagement")
);
RequestAttributes attr = (RequestAttributes)s;
attr.setUserId(username);
attr.setPassword(password);

Map result = [:]
result.url = url
result.totalCount = 0
result.elements = []

// The ServiceManager only allows us to fetch metadata for 100 services at a
// time. So we have to be prepared to page through the entire list if more than
// 100.
int PAGE_SIZE = 100
int count = 0
ServiceEntrySearchResult more = s.searchServices(count, PAGE_SIZE, conditions, order, "ALL");
while (more.elements.length > 0) {
    result.elements.addAll more.elements
    count += more.elements.length
    more = s.searchServices(count, PAGE_SIZE, conditions, order, "ALL")
}
result.totalCount = count
if (headers.Accept?.contains('application/json')) {
    response.status = 200
    response.contentType = 'application/json'
    out.println new groovy.json.JsonBuilder(result).toPrettyString()
}
else if (headers.Accept?.contains('text/html')) {
    html.html {
        head {
            title "Brandeis Services"
            style '''
                html {
                    margin: 10px 25px;
                }
                table {
                    width: 90%;
                    margin: 10px 20px;
                    border: 1px solid black;
                    border-collapse: collapse;
                }
                tr {
                    vertical-align: top;
                    padding: 0px;
                    margin: px;
                }
                tr:nth-child(even) { background-color: #f5f5f5 }
                th {
                    color: white;
                    background-color: #333;
                }
                th, td {
                    text-align: left;
                    padding: 3px 10px;
                }
                p {
                    margin: 10px 20px;
                }
'''
        }
        body {
            h1 "LAPPS Services on the Brandeis node"
            p "Total Services Registered: ${result.totalCount}"
            table {
                thead {
                    th 'Name'
                    th 'Endpoint'
                    th ''
                }
                tbody {
                    result.elements.each { e->
                        String u = "http://api.lappsgrid.org/metadata?id=${e.serviceId}"
                        String handler = "window.open('$u', '_self')"
                        tr {
                            td e.serviceName
                            td e.endpointUrl
                            td {
                                button(onclick:"$handler", 'View metadata...')
                            }
                        }
                    }
                }
            }
        }
    }
}
else {
    response.status = 406
    response.addHeader('Accept', 'application/json, text/html')
    out.println "Please request application/json or text/html"
}


