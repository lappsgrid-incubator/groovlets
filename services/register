@GrabConfig(systemClassLoader=true)
@Grab('com.h2database:h2:1.4.194')
@Grab('org.lappsgrid:api:2.0.1')
@Grab('org.lappsgrid:serialization:2.4.0')
@Grab('org.lappsgrid:client:2.0.4')
import org.lappsgrid.client.ServiceClient

import groovy.sql.Sql
import groovy.json.JsonSlurper
import javax.servlet.http.HttpServletResponse

String method = request.method
if (method != 'POST') {
    response.status = HttpServletResponse.SC_METHOD_NOT_ALLOWED
    response.contentType = 'text/plain'
    out.println 'Only POST requests are permitted.'
    return
}

// Check the required parameters are present.
String id = params.id
if (id == null) {
    response.status = HttpServletResponse.SC_BAD_REQUEST
    response.contentType = 'text/plain'
    out.println 'No \'id\' parameter provided'
    return
}
if (params.server == null) {
    response.status = HttpServletResponse.SC_BAD_REQUEST
    response.contentType = 'text/plain'
    out.println "No server id provided. Must be one of 'vassar' or 'brandeis'."
    return
}

// Foreign key for the server
String fkServer = -1
// Validate the name of the server.
String url
if (params.server == 'vassar') {
    fkServer = 1
    url = 'http://vassar.lappsgrid.org/invoker/anc:' + id
}
else if (params.server == 'brandeis') {
    fkServer = 2
    url = 'http://eldrad.cs-i.brandeis.edu:8080/service_manager/invoker/brandeis_eldrad_grid_1:' + id
}
else {
    response.status = HttpServletResponse.SC_BAD_REQUEST
    response.contentType = 'text/plain'
    out.println "Invalid value for the 'server' parameter. Must be one of 'vassar' or 'brandeis'"
    println "Invalid value for the 'server' parameter. Must be one of 'vassar' or 'brandeis'"
    return
}

DB_URL = System.getenv('PRODUCERS_DB')
if (DB_URL == null) {
    DB_URL = "jdbc:h2:/tmp/producers" //;AUTO_SERVER=TRUE"
}

Class.forName("org.h2.Driver")
Sql sql = Sql.newInstance(DB_URL, "admin", "admin", "org.h2.Driver")

// See if the service has already been registered
def rows = sql.rows('select * from service where service_id = :id', [id:id])
if (rows.size() > 0) {
    response.status = 400
    out.println "Service is already registered."
    return
}

// Fetch the metadata from the service.
ServiceClient client = new ServiceClient(url, 'tester', 'tester')
def object = new JsonSlurper().parseText(client.getMetadata())
if (object.discriminator != 'http://vocab.lappsgrid.org/ns/meta') {
    // Should this return "400 Bad Request" instead of a "500 Server Error"?
    response.status = HttpServletResponse.SC_INTERNAL_SERVER_ERROR
    out.println "The service did not return LAPPS metadata."
    return
}

def payload = object.payload

// Get the PID for this service
URLConnection connection = new URL('http://api.lappsgrid.org/lookup?url=' + url).openConnection()
if (connection.responseCode != 200) {
    response.status = 500
    out.println "Unable to fetch PID for $url"
    return
}
String pid = connection.inputStream.text.trim()

// Insert the service
def params = [ id:id, pid:pid, fk:fkServer ]
def result = sql.executeInsert('insert into service (service_id, pid, fk_server_id) values (:id, :pid, :fk)', params)

String serviceKey = result[0][0]

// Insert the annotations required by the service.
payload?.requires?.annoations.each {
    params = [ fk:serviceKey, a:it ]
    sql.executeInsert('insert into requires (fk_service_id, annotation) values (:fk, :a)', params)
}

// Insert the annotations produced by the service
payload?.produces?.annoations.each {
    params = [ fk:serviceKey, a:it ]
    sql.executeInsert('insert into produces (fk_service_id, annotation) values (:fk, :a)', params)
}

response.status = 200
out.println "Service registered"




