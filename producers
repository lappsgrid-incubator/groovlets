@GrabConfig(systemClassLoader=true)
@Grab('com.h2database:h2:1.4.194')

import groovy.sql.Sql
import groovy.xml.MarkupBuilder

import javax.servlet.http.HttpServletResponse

LOG_PATH = System.getenv('LOG_PATH')
if (LOG_PATH == null) {
    LOG_PATH = '/tmp/groovlets.log'
}

DB_URL = System.getenv('PRODUCERS_DB')
if (DB_URL == null) {
    DB_URL = "jdbc:h2:/usr/share/producers;AUTO_SERVER=TRUE"
}
Class.forName("org.h2.Driver")
Sql sql = Sql.newInstance(DB_URL, "admin", "admin", "org.h2.Driver")

void log(String message) {
    String timestamp = new Date().format('yyyy-MM-dd hh:mm:ss')
    new File(LOG_PATH).append("[$timestamp] PROD ${request.remoteHost} $message\n")
}

String method = request.method

// Always respond to OPTION requests.
if (method == 'OPTIONS') {
    response.status = 200
    response.addHeader('Allow', 'GET')
    return
}

if (method != 'GET') {
    response.status = HttpServletResponse.SC_METHOD_NOT_ALLOWED
    response.addHeader('Allow', 'OPTIONS, GET')
    out.println "Method not allowed. Only OPTIONS or GET permitted."
    return
}

String annotation = params.annotation
if (!annotation) {
    response.status = 400
    out.println "Annotation type missing."
    params.each { k, v ->
        out.println "$k = $v"
    }
    return
}
String query = "select s.url, v.service_id from server s, service v, produces p where p.annotation = '$annotation' AND p.fk_service_id = v.id AND v.fk_server_id = s.id"

def rows = sql.rows(query)
response.addHeader('Lapps-Result-Set-Size', rows.size().toString())

if (headers.Accept?.contains('text/html')) {
    response.status = 200
    response.contentType = 'text/html'
    html.html {
        head {
            title "$annotation Producers"
        }
        body {
            h1 "Producers"
            p "The following LAPPS services provide $annotation annotations."
            table {
                rows.each { row ->
                    tr {
                        td "${row.url}/invoker/${row.service_id}"
                    }
                }
            }
        }
    }
} else if (headers.Accept?.contains('application/json')) {
    List list = []
    rows.each { row ->
        list << "${row.url}/invoker/${row.service_id}"
    }
    response.status = 200
    response.contentType = 'application/json'
    out.println new groovy.json.JsonBuilder(list).toPrettyJson()
} else if (headers.Accept?.contains('text/plain')) {
    response.status = 200
    response.contentType = 'text/plain'
    rows.each { row ->
        out.println "${row.url}/invoker/${row.service_id}"
    }
} else if (headers.Accept.contains('application/xml')) {
    response.status = 200
    response.contentType = 'text/xml'
    StringWriter writer = new StringWriter()
    MarkupBuilder xml = new MarkupBuilder(writer)
    xml.services {
        rows.each { row ->
            url "${row.url}/invoker/${row.service_id}"
        }
    }
    out.print writer.toString()
} else {
    response.status = HttpServletResponse.SC_NOT_ACCEPTABLE
    response.contentType = 'text/plain'
    response.addHeader('Accept', 'text/html, text/xml, text/plain, application/json')
    out.println "Please set the Accept header."
    out.println "This service can produce text/plain, text/html, application/xml, or application/json."
}

return