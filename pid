
@GrabConfig(systemClassLoader=true)
@Grab('com.h2database:h2:1.4.194')

import groovy.json.*
import groovy.sql.Sql

import static javax.servlet.http.HttpServletResponse.*

LOG_PATH = System.getenv('LOG_PATH')
if (LOG_PATH == null) {
    LOG_PATH = '/tmp/groovlets.log'
}

DB_URL = System.getenv('DB_URL')
if (DB_URL == null) {
    DB_URL = "jdbc:h2:file://tmp/pid"
}


CHARSET='charset=utf-8'
TEXT='text/plain'
JSON='application/json'

// Not an efficient way of performing logging, but this should be called exactly once
// per method invocation.
void log(String message) {
    String timestamp = new Date().format('yyyy-MM-dd hh:mm:ss')
    new File(LOG_PATH).append("[$timestamp] PID ${request.remoteHost} $message\n")
}

String method = request.method
if (request.method == 'OPTIONS') {
    response.status = 200
    response.addHeader('Allow', 'POST, GET')
    response.addHeader('Accept', 'application/json')
    return
}


Sql sql = Sql.newInstance(DB_URL, "pid", "pid", "org.h2.Driver")

if (method == 'POST') {
//    if (headers.Authorization == null) {
//        response.status = 403
//        out.println "No authorization header"
//        return
//    }
//    if (headers.Authorization != "token ${System.getenv('PID_TOKEN')}") {
//        response.status = 403
//        out.println "Invalid authorization token"
//        return
//    }

    String url
    String text = request.inputStream.text
    if (text) {
        if (request.contentType != JSON) {
            response.status = SC_UNSUPPORTED_MEDIA_TYPE
            log('Unsupported media type.')
            return
        }
        Map body = new JsonSlurper().parseText(text)
        if (body.url) {
            url = body.url
        }
    }
    if (!url) {
        url = params.url
    }
    if (!url) {
        response.status = 400
        out.println "No url specified."
        log('No URL')
        return
    }
    def row = sql.firstRow("select pid from pid where url=${url}")
    if (row) {
        response.status = SC_CONFLICT
        response.contentType = "$TEXT;$CHARSET"
        out.println "ALREADY REGISTERED"
        out.println 'http://pid.lappsgrid.org/' + row.pid
        log("Already registered $url")
        return
    }
    String pid = UUID.randomUUID()
    sql.executeInsert('insert into pid (url,pid) VALUES (:url,:pid);', [url:url, pid:pid])
    response.status = SC_CREATED
    response.contentType = "$TEXT;$CHARSET"
    out.println pid
    log("Created $pid for $url")
    return
}
else if (method == 'GET') {
    String url = params.url
    if (!url) {
        response.status = SC_BAD_REQUEST
        response.contentType = "$TEXT;$CHARSET"
        out.println "URL MISSING"
        return
    }
    def row = sql.firstRow('select * from pid where url=:url', [url:url])
    if (row) {
        response.status = SC_OK
        response.contentType = "$TEXT;$CHARSET"
        out.println 'http://pid.lappsgrid.org/' + row.pid
        return
    }
    response.status = SC_NOT_FOUND
}

